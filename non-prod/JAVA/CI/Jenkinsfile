pipeline {
    agent any

    environment {
        giurl = 'https://github.com/shinrah/JAVA-Application-.git'
        gitBranch = "${params.GIT_Branch_Tag}"
        formattedGitBranch = "${params.GIT_Branch_Tag}" // Adjust if formatting is needed
    }

    parameters {
        choice(name: 'mode', choices: ['Deploy', 'stop', 'start', 'restart'], description: 'Choose mode for deployment or starting the application server')
        choice(name: 'host', choices: ['main', 'master', 'UAT'], description: 'Choose environment to deploy master')
        choice(name: 'GIT_Branch_Tag', choices: ['main', 'master', 'feature-branch', 'UAT'], description: 'Select Git branch to deploy')
    }

    stages {
        // Clean up first to clear workspace before starting fresh
        stage('Clean up') {
            steps {
                script {
                    cleanWs() // Clean up the workspace
                    echo "Workspace cleaned up before starting the pipeline."
                }
            }
        }

        stage('Git Checkout') {
            steps {
                git credentialsId: 'Github-token', branch: "${params.GIT_Branch_Tag}", url: "${giurl}"
            }
        }

        stage('Checkout Git Branch') {
            steps {
                git branch: "${env.GitBranch}", url: "${env.giurl}"
            }
        }

        stage('Print environment and mode') {
            steps {
                script {
                    env.Host = sh(returnStdout: true, script: "echo ${params.host}").trim()
                    env.Mode = sh(returnStdout: true, script: "echo ${params.mode}").trim()
                    env.Deployment_Method = sh(returnStdout: true, script: "echo ${params.mode}").trim()
                    env.GitBranch = params.GIT_Branch_Tag
                }
            }
        }

        stage('Build Artifacts') {
            steps {
                script {
                    if (params.mode == "Deploy") {
                        currentBuild.displayName = "${params.host}_${params.mode}_${BUILD_NUMBER}"
                        echo "Ready to build for ${params.host} from branch ${params.GIT_Branch_Tag}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo "Running Maven build..."
                sh 'mvn clean package'
            }
        }

        // Clean up after build (optional)
        stage('Clean up after build') {
            steps {
                script {
                    cleanWs() // Clean up workspace after build
                    echo "Workspace cleaned up after the build."
                }
            }
        }
    }
}

